package DesignPattern;

//这个抽象工厂只定义一个生产产品的抽象方法
public abstract class FactoryMethod {
    public abstract Product createProduct();
}

//这个工厂只生产产品1
class Product1Factory extends FactoryMethod{
    @Override
    public Product createProduct() {
        return new Product1();
    }
}

//这个工厂只生产产品2
class Product2Factory extends FactoryMethod{
    @Override
    public Product createProduct() {
        return new Product2();
    }
}


//一个抽象的产品类
interface Product {

}

//产品1实现了抽象产品类
class Product1 implements Product {

}

//产品2实现了抽象产品类
class Product2 implements Product {

}

//工厂方法，客户类通过具体工厂类获取想要的对象
class Client {
    public static void main(String[] args) {
        //来个工厂
        FactoryMethod factory;
        //想要产品2,所以创建了产品2的工厂，该代码可以通过反射实现
        factory = new Product2Factory();
        //得到了产品2
        Product product = factory.createProduct();
    }
}
